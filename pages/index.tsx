import type { NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import { InView } from "react-intersection-observer";
import { useLazyQuery } from "@apollo/client";

import { GET_USER_SEARCH } from "../apollo/queries/search";
import ProfileCard from "../components/ProfileCard";
import SearchForm from "../components/SearchFrom";
import Skeleton from "../components/Skeleton";
import Loading from "../components/Loading";
import Footer from "../components/Footer";

const PAGE_SIZE = 6;

const Home: NextPage = () => {
  const [query, setQuery] = useState<string>("");
  const [isFetchMore, setIsFetchMore] = useState(true);
  const [runSearchQuery, { loading, data, fetchMore }] = useLazyQuery(
    GET_USER_SEARCH,
    {
      variables: {
        first: PAGE_SIZE,
        query: query,
      },
    }
  );
  useEffect(() => {
    if (data) setIsFetchMore(data.search.pageInfo.hasNextPage);
  }, [data]);

  const loadMoreUsers = () => {
    const { endCursor } = data.search.pageInfo;
    if (!isFetchMore) return;

    fetchMore({
      variables: { after: endCursor },
      updateQuery: (prevResult, { fetchMoreResult }) => {
        setIsFetchMore(fetchMoreResult.search.pageInfo.hasNextPage);
        fetchMoreResult.search.edges = [
          ...prevResult.search.edges,
          ...fetchMoreResult.search.edges,
        ];
        fetchMoreResult.search.pageInfo = fetchMoreResult.search.pageInfo;
        return fetchMoreResult;
      },
    });
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    runSearchQuery({
      variables: {
        first: PAGE_SIZE,
        query,
      },
    });
  };
  const handleSearch = (e: React.FormEvent<HTMLInputElement>) => {
    const value = e.currentTarget.value as string;
    setQuery(value);
  };

  return (
    <div className="py-8 bg-slate-100">
      <Head>
        <title>A nextjs app for github user search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col px-8 min-h-screen items-center justify-center">
        <h1 className="text-3xl x my-4 text-center ">
          Welcome to{" "}
          <a
            href="https://developer.github.com/v3/search/"
            className="text-blue-600"
          >
            Github user search!
          </a>
        </h1>
        <SearchForm
          query={query}
          onSearchFormSubmit={handleSubmit}
          onSearchInputChange={handleSearch}
        />

        <section className="flex items-center justify-center flex-wrap">
          {data && data.search.edges.length === 0 && <Skeleton />}
          {loading && <Loading />}
          {data &&
            data.search.edges.map((item: any) => (
              <ProfileCard
                key={item.node.id}
                name={item.node.name}
                avatarUrl={item.node.avatarUrl}
                location={item.node.location}
                bio={item.node.bio}
                profileUrl={item.node.url}
              />
            ))}
          {data && (
            <InView
              onChange={async (inView) => {
                if (inView) {
                  loadMoreUsers();
                }
              }}
            />
          )}
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default Home;
